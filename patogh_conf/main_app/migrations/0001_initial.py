# Generated by Django 3.2.3 on 2021-07-09 13:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this City', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Where do you live?', max_length=40)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Gathering',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this gathering', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.SmallIntegerField(choices=[('0', 'uncommited'), ('1', 'commited')], default=0)),
                ('start_time', models.DateTimeField(help_text='Start time for the patogh', null=True)),
                ('end_time', models.DateTimeField(help_text='end time for the patogh', null=True)),
                ('description', models.CharField(help_text='descripe your patogh', max_length=1000)),
                ('gender_filter', models.SmallIntegerField(choices=[('0', 'Female Only'), ('1', 'Male Only'), ('-1', 'No filter')], default=-1)),
                ('members_count', models.IntegerField(default=-1, help_text='-1 means no filter')),
                ('min_age', models.IntegerField(default=-1, help_text='-1 means no filter')),
                ('max_age', models.IntegerField(default=-1, help_text='-1 means no filter')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='LocationTypes',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this Location', primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Patogh',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this Patogh', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('1', 'public'), ('2', 'private')], max_length=10)),
                ('telephone', models.CharField(max_length=12)),
                ('is_telephone_verified', models.CharField(choices=[('0', 'registered'), ('1', 'verified')], max_length=10)),
                ('address', models.CharField(max_length=1000)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('profile_image_url', models.CharField(blank=True, max_length=128, null=True)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.city')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PendingVerify',
            fields=[
                ('receptor', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('otp', models.IntegerField()),
                ('send_time', models.DateTimeField(null=True)),
                ('allowed_try', models.SmallIntegerField(default=5)),
            ],
            options={
                'ordering': ['send_time'],
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('username', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('fullname', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=50, unique=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True, unique=True)),
                ('birthdate', models.DateField()),
                ('gender', models.CharField(blank=True, choices=[('0', 'female'), ('1', 'male')], max_length=6)),
                ('profile_image_url', models.CharField(blank=True, max_length=128, null=True)),
                ('bio', models.CharField(blank=True, max_length=1000, null=True)),
                ('last_login_try', models.TimeField(blank=True, null=True, verbose_name='last login')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.city')),
            ],
            options={
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='UsersPermision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this User Permision', primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=30, null=True, unique=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this Tag', primary_key=True, serialize=False)),
                ('tag', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'ordering': ['id'],
                'unique_together': {('id', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='PatoghsComments',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique Id for this patogh Commments', primary_key=True, serialize=False)),
                ('send_time', models.DateTimeField(auto_now_add=True)),
                ('comment', models.CharField(max_length=1000)),
                ('patogh_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.patogh')),
                ('reply_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.patoghscomments')),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.users')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PatoghHaveImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.CharField(max_length=128)),
                ('status', models.SmallIntegerField(choices=[('0', 'registered'), ('1', 'accepted'), ('2', 'rejected'), ('3', 'deleted')], default=0)),
                ('send_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('patogh_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.patogh')),
            ],
            options={
                'ordering': ['patogh_id'],
            },
        ),
        migrations.AddField(
            model_name='patogh',
            name='creator_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.users'),
        ),
        migrations.AddField(
            model_name='patogh',
            name='location_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.locationtypes'),
        ),
        migrations.AddField(
            model_name='patogh',
            name='tags_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.tags'),
        ),
        migrations.CreateModel(
            name='GatheringScheduall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Sa', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('Su', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('Mo', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('Tu', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('We', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('Th', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('Fr', models.SmallIntegerField(choices=[('0', 'default'), ('1', 'repeat')])),
                ('g_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.gathering')),
            ],
            options={
                'ordering': ['g_id'],
            },
        ),
        migrations.AddField(
            model_name='gathering',
            name='creator_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.users'),
        ),
        migrations.AddField(
            model_name='gathering',
            name='patogh_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.patogh'),
        ),
        migrations.AddField(
            model_name='gathering',
            name='tags_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main_app.tags'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UsersHavePermisions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permision_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.userspermision')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.users')),
            ],
            options={
                'ordering': ['username'],
                'unique_together': {('username', 'permision_id')},
            },
        ),
        migrations.CreateModel(
            name='reportedPatogh',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('massage', models.CharField(max_length=1000)),
                ('send_time', models.DateTimeField(auto_now_add=True)),
                ('patogh_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main_app.patogh')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main_app.users')),
            ],
            options={
                'ordering': ['patogh_id'],
                'unique_together': {('patogh_id', 'username')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='patogh',
            unique_together={('id', 'creator_id')},
        ),
        migrations.CreateModel(
            name='JoinGatheringRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[('0', 'requested'), ('1', 'accepted'), ('2', 'rejected')])),
                ('g_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.gathering')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.users')),
            ],
            options={
                'ordering': ['g_id'],
                'unique_together': {('g_id', 'username')},
            },
        ),
        migrations.CreateModel(
            name='GatheringHaveMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[('0', 'normal member'), ('1', 'deleted'), ('2', 'quit')], default=0)),
                ('g_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.patogh')),
                ('username', models.ForeignKey(max_length=30, on_delete=django.db.models.deletion.CASCADE, to='main_app.users')),
            ],
            options={
                'ordering': ['username'],
                'unique_together': {('g_id', 'username')},
            },
        ),
    ]
